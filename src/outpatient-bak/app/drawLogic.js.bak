///////////////////////////////////////////////////////////
// Connection: Kinetic to Sencha
//  - bridges via firing Ext events
///////////////////////////////////////////////////////////

// Allows us to throw Ext events, triggering Sencha code when tapping on Kinetic items
var SAVE_LOAD_MASK_MAX_WAIT_TIME = 2000;
Ext.define('KineticToSencha', {
  mixins: ['Ext.mixin.Observable'],
  id: 'k2s',
  config: {
    fullName: ''
  },
  constructor: function(config) {
    this.initConfig(config); // We need to initialize the config options when the class is instantiated
  },
  addMedication: function() {
    this.fireEvent('clickAddMedication');
  },
  clickDiagnosis: function() {
    this.fireEvent('clickOnDiagnosis');
  },
  saveLoadMask: function() {
    var mask = function() {
        console.log('mask off');
        Ext.getCmp('opdPatientDataEntry').setMasked(false)
      }

    console.log('mask on');
    Ext.getCmp('opdPatientDataEntry').setMasked({
      xtype: 'loadmask',
      message: 'Saving...',
      modal: true
    });

    setTimeout(mask, SAVE_LOAD_MASK_MAX_WAIT_TIME);
  }
});

// TODO: take these out of global scope
var g_diagnosis_text = "";
var g_diagnosis_list = "";
var order;
var obs;
var DoctorOrderStore;
var DoctorOrderModel;

var k2s = Ext.create('KineticToSencha', {

  addOrder: function() {
    //set persist of order true as Doctor may not always have a order
    RaxaEmr.Outpatient.model.DoctorOrder.getFields().items[6].persist = true; //6th field in orders (sorted)
    // RaxaEmr.Outpatient.model.DoctorOrder.getFields().get('orders').setPersist(true); //6th field in orders (sorted)
    var drugPanel = Ext.getStore('drugpanel');

    lengthOfDrugOrder = Ext.getStore('drugpanel').getData().all.length;

    for(var i = 0; i < lengthOfDrugOrder; i++) {
      var drugPanel = Ext.getStore('drugpanel').getData().all[i].data;

      //Drug Orders here
      var OrderModel = Ext.create('RaxaEmr.Pharmacy.model.drugOrder', {
        patient: myRecord.data.uuid,
        //need to set selected patient uuid in localStorage
        drug: drugPanel.uuid,
        startDate: Util.Datetime(new Date(), Util.getUTCGMTdiff()),
        autoExpireDate: Util.Datetime(new Date((new Date()).getFullYear(), (new Date()).getMonth(), (new Date()).getDate() + drugPanel.duration), Util.getUTCGMTdiff()),
        concept: '---',
        //   drugPanel.data.uuid, uuid is not currently stored, need to work on how Drug order is added to store
        dose: drugPanel.frequency,
        quantity: drugPanel.routeofadministration
        //      type: 
        //      instruction:
      });
      DoctorOrderModel.data.obs.push(OrderModel.data);
    }
  },

  addObs: function() {
    //TODO set persit TRUE if first order 
    // RaxaEmr.Outpatient.model.DoctorOrder.getFields().items[5].persist= true; //5th field in obs (sorted)
    //TODO set persist FALSE if no item in list
    DoctorOrderModel.data.obs = [];

    lengthOfDiagnosis = Ext.getCmp('diagnosedList').getStore().data.length;

    for(var i = 0; i < lengthOfDiagnosis; i++) {
      console.log(Ext.getCmp('diagnosedList').getStore().data.all[i]);

      var ObsModel = Ext.create('RaxaEmr.Outpatient.model.Observation', {
        obsDatetime: Util.Datetime(new Date(), Util.getUTCGMTdiff()),
        person: myRecord.data.uuid,
        //need to set selected patient uuid in localStuiorage
        concept: Ext.getCmp('diagnosedList').getStore().data.all[i].data.id,
      });
      DoctorOrderModel.data.obs.push(ObsModel.data);
    }

    console.log(DoctorOrderModel);

  },

  addDoctorRecordImage: function() {

    // TODO UNABLE TO access ControlsLayer here
    // children till 7 are already there and rest goes into 
    // console.log(controlsLayer.children[8].attrs.image.src)
    // DoctorOrderModel.data.obs = [];
    //    (document.getElementById('id-of-doctor-form').src)
    //TODO check all objects of canvas which are saved and then push it as obs 
    // OR store an array of image which can be sent
    //set Image in obs json
    console.log('checking patient records in stage and copying to DoctorOrder store');

    for(var i = 0; i < stage.getChildren().length; i++) {
      for(var j = 0; j < stage.getChildren()[i].children.length; j++) //j is always 4, but not now.
      {
        if(stage.getChildren()[i].children[j].attrs.id == "PatientRecord") {
          console.log(stage.getChildren()[i].children[j].attrs.image);

          var ObsModel = Ext.create('RaxaEmr.Outpatient.model.Observation', {
            obsDatetime: Util.Datetime(new Date(), Util.getUTCGMTdiff()),
            person: myRecord.data.uuid,
            //need to set selected patient uuid in localStorage
            concept: localStorage.patientRecordImageUuidconcept,
            value: stage.getChildren()[i].children[j].attrs.image.src
          });
          DoctorOrderModel.data.obs.push(ObsModel.data);
        }
      }
    }
    console.log(Ext.getStore('DoctorOrder'));

  },

  // <Comment describing>
  sendDoctorOrderEncounter: function() {
    // this.addDoctorRecordImage();
    //sync store after addObs , addDoctorRecordImage and addOrder
    console.log(Ext.getStore('DoctorOrder'));
  },

  // <Comment describing>
  initStore: function() {
    DoctorOrderStore = Ext.create('RaxaEmr.Outpatient.store.DoctorOrder');
    DoctorOrderModel = Ext.create('RaxaEmr.Outpatient.model.DoctorOrder', {
      uuid: null,
      //need to get myRecord variable of patientlist accessible here, so made it global variable
      //may need to set it later if new patient is created using DoctorOrder view (currently view/patient/draw.js)
      //other way is to create method in Controller which returns myRecord.data.uuid
      encounterType: localStorage.outUuidencountertype,
      encounterDatetime: Util.Datetime(new Date(), Util.getUTCGMTdiff()),
      //Should encounterDatetime be time encounter starts or ends?
      provider: localStorage.loggedInProvider,
    });

    DoctorOrderModel.data.obs = [];
    DoctorOrderModel.data.orders = [];
    console.log(DoctorOrderStore);

    //    this.sendDoctorOrderEncounter();
  },

  printDiagnosis: function() {

    // By default, "this" will be the object that fired the event.
    console.log("k2s: clickOnDiagnosis");
    // Ext.getCmp('plusDrugButton').fireEvent('tap'); // hack to press a real button and launch its dialog
    console.log("k2s: NOTE ADDING DIAGNOSES FOR NOW");
    // Print store. I'll have to pull info from this to print in Canvas
    // TODO: let's start with just the drug's name..
    var displayText = "";

    var store = Ext.getStore('diagnosedDisease');
    var data = store.getData();
    var itemCount = data.getCount();
    if(itemCount > 0) {
      displayText += "Diagnoses: \n";
    }

    for(var i = 0; i < itemCount; i++) {
      var itemData = data.getAt(i).getData();
      console.log(itemData);
      console.log(itemData.complain || "");
      displayText += ('* ' + itemData.complain + '\n');
    }
    console.log('display...', displayText);

    // TODO: Trigger refresh of Kinetic UI ... drug list should be updated
    g_diagnosis_list = displayText;

    /*     TODO UI Designers want prev Diagnosis to be showed (with different color ) 
      store.clearData(); // Prevents repeating.. now just need to create multiple prescription text boxes
*/
    Ext.getCmp('diagnosis-panel').setHidden(false);
    //      Ext.getCmp('drugaddform').reset();
    //      Ext.getCmp('treatment-panel').setActiveItem(TREATMENT.ADD);
    //drawDiagnosis('text');
    this.drawTextAtLowPoint('Hi');
  },

  listeners: {
    clickAddMedication: function() { // This function will be called when the 'quit' event is fired
      // By default, "this" will be the object that fired the event.
      console.log("k2s: clickAddMedication");

      var displayText = "";
      var store = Ext.getStore('drugpanel');
      var data = store.getData();
      var itemCount = data.getCount();
      if(itemCount > 0) {
        displayText += "Medications: \n";
      }

      for(var i = 0; i < itemCount; i++) {
        var itemData = data.getAt(i).getData();

        // TODO: Consolidate following code into loop
        if(!itemData.drugname) {
          // If no drug name, skip to next loop iteration
          continue;
        } else {
          displayText += ('* ' + itemData.drugname);
        }

        var duration = itemData.duration;
        if(duration) {
          displayText += (' - ' + duration);
        }

        var strength = itemData.strength;
        if(strength) {
          displayText += (' - ' + strength);
        }

        var quantity = itemData.duration;
        if(quantity) {
          displayText += (' - ' + quantity);
        }

        var frequency = itemData.frequency;
        if(frequency) {
          displayText += (' - ' + frequency);
        }

        var instruction = itemData.instruction;
        if(instruction) {
          displayText += (' - ' + instruction);
        }

        displayText += '\n';

        // return itemData.drugname || "";
      }
      console.log('display...', displayText);

      // TODO: Trigger refresh of Kinetic UI ... drug list should be updated
      g_diagnosis_text = displayText;


      //TODO UI Designers want prev Diagnosis to be showed (with different color    
      // store.clearData(); // Prevents repeating.. now just need to create multiple prescription text boxes

      Ext.getCmp('drugForm').setHidden(false);
      Ext.getCmp('drugaddform').reset();
      // Ext.getCmp('treatment-panel').setActiveItem(0);
    },

    clickOnDiagnosis: function() { // This function will be called when the 'quit' event is fired
      console.log("k2s: clickOnDiagnosis");
      // Print store. I'll have to pull info from this to print in Canvas
      var displayText = "";
      var store = Ext.getStore('diagnosedDisease');
      var data = store.getData();
      var itemCount = data.getCount();
      if(itemCount > 0) {
        displayText += "Diagnoses: \n";
      }

      for(var i = 0; i < itemCount; i++) {
        var itemData = data.getAt(i).getData();
        displayText += ('* ' + itemData.complain + '\n');
        // return itemData.drugname || "";
      }
      console.log('display...', displayText);

      // TODO: Trigger refresh of Kinetic UI ... drug list should be updated
      g_diagnosis_list = displayText;

      /*     TODO UI Designers want prev Diagnosis to be showed (with different color ) 
      store.clearData(); // Prevents repeating.. now just need to create multiple prescription text boxes
*/
      Ext.getCmp('diagnosis-panel').setHidden(false);
      //      Ext.getCmp('drugaddform').reset();
      //      Ext.getCmp('treatment-panel').setActiveItem(TREATMENT.ADD);
    }
  }
});

///////////////////////////////////////////////////////////
// Kinetic JS, drawing Canvas
///////////////////////////////////////////////////////////
imageCount = 0;

var DRAWABLE_X_MIN = 60;
var DRAWABLE_X_MAX = 700; // 708 - strict border
var DIFF = 144; // moving whole thing up a bit ... 1024 - 880 = 144
var DRAWABLE_Y_MIN = 200 - DIFF; // 230 - strict border 
var DRAWABLE_Y_MAX = 1024;
var DEFAULT_MODE = "draw"; // undefined
var STAGE_X = 768; //768
var STAGE_Y = 1024; //1024
var HISTORY_BASE_X = DRAWABLE_X_MAX;
var HISTORY_BASE_Y = DRAWABLE_Y_MIN + 196;
var HISTORY_ITEM_DIM = 64;

var CONTROL_BASE_X = 2;
var CONTROL_BASE_Y = 2;
var CONTROL_ITEM_SPACING = 3;
var CONTROL_ITEM_DIM = 50;
var HIGH_Y_OFFSET = 5; // a little extra space

function isInDrawableArea(myX, myY) {
  up = {
    x: myX,
    y: myY
  };

  if((DRAWABLE_X_MIN <= up.x && up.x <= DRAWABLE_X_MAX) && (DRAWABLE_Y_MIN <= up.y && up.y <= DRAWABLE_Y_MAX)) {
    return true;
  } else {
    // console.log("not in drawable area: ", up.x, up.y );  
    return false;
  }
}

stage = new Object;

var setupCanvas = function() {

    var lowY = DRAWABLE_Y_MIN;
    var highY = DRAWABLE_Y_MIN;

    var newLine;
    var newLinePoints = [];
    var prevPos;
    var mode = DEFAULT_MODE;

    var historyYOffset = HISTORY_BASE_Y;

    backgroundLayer = new Kinetic.Layer();
    loadedImageLayer = new Kinetic.Layer(); // For re-loaded thumbs
    linesLayer = new Kinetic.Layer();
    textLayer = new Kinetic.Layer();
    controlsLayer = new Kinetic.Layer();

    // Setup stage, upon which all layers are built.
    stage = new Kinetic.Stage({
      id: "stage",
      container: "container",
      width: STAGE_X,
      height: STAGE_Y
    });

    // Layers
    stage.add(backgroundLayer);
    stage.add(linesLayer);
    stage.add(textLayer); // in front of "draw" layer, i.e. cant draw on a diagnosis. for now.
    stage.add(loadedImageLayer);
    stage.add(controlsLayer);

    moving = false;

    //To allow using stage from outside

    function getStage() {
      console.log('accessing getStage function in setupCanvas');
      return stage;
    }

    ////////////////////////
    // Event Listeners 
    ////////////////////////
    stage.on("mousedown touchstart", function() {
      dragStart();
    });
    stage.on('mousemove touchmove', function() {
      dragMove();
    });
    stage.on("mouseup", function() {
      dragComplete();
    });
    stage.on("touchend", function() {
      dragComplete();
    });

    ////////////////////////
    // Event Handlers
    ////////////////////////

    // First touch or click starts a drag event
    function dragStart() {
      // console.log('dragStart');
      var up = stage.getUserPosition();
      if(!up || !isInDrawableArea(up.x, up.y) || mode !== 'draw') {
        return;
      }

      if(moving) {
        moving = false;
        backgroundLayer.draw();
      } else {
        newLinePoints = [];
        prevPos = stage.getUserPosition(); // Mouse or touch
        newLinePoints.push(prevPos);
        newLine = new Kinetic.Line({
          points: newLinePoints,
          stroke: "red",
        });
        linesLayer.add(newLine);

        moving = true;
      }
    }

    // While user holding down the mouse clicker or touch, continue dragging
    function dragMove() {
      var up = stage.getUserPosition();
      // console.log(up.x, up.y);
      if(!up || !isInDrawableArea(up.x, up.y)) {
        return;
      }

      // console.log('dragMove');
      if(mode !== 'draw') {
        return;
      }

      if(moving) {
        var mousePos = stage.getUserPosition(); // Mouse or touch
        var x = mousePos.x;
        var y = mousePos.y;
        newLinePoints.push(mousePos);
        updateBounds(mousePos);
        prevPos = mousePos;

        moving = true;
        linesLayer.drawScene();
      }
    }

    // On release of mouse or touch, done dragging
    function dragComplete() {
      console.log('drag complete');

      var up = stage.getUserPosition();
      if(!up || !isInDrawableArea(up.x, up.y)) {
        return;
      }

      if(mode !== 'draw') {
        return;
      }

      moving = false;
    }

    // Keep track of the current low and high bounds (y-axis) for where a user
    // has already added content onto the canvas. The idea is that we want to add
    // structured data (diagnoses, prescriptions, ...) into blank areas on the 
    // canvas where the user hasn't yet written.
    function updateBounds(mousePos) {
      var y = mousePos.y;
      if(y < lowY || lowY == undefined) {
        lowY = y;
      }
      if(y > highY || highY == undefined) {
        highY = y + HIGH_Y_OFFSET;
      }
    }

    // SAVING 

    // Save - event handler
    function onSaveCanvas() {
      // Callback, since the stage toDataURL() method is asynchronous, 
      k2s.saveLoadMask();
      saveDrawableCanvas();
    }

    // Save - saves just "drawable" portion of canvas
    function saveDrawableCanvas() {
      // TODO: Hide/show paper layer when creating dataURL "screenshot"?
      // backgroundLayer.hide();

      // Convert stage to image. From image, create KineticImage and crop to "drawable" portion
      stage.toImage({
        callback: function(i) {
          kineticImage = new Kinetic.Image({
            image: i,
            x: 0,
            y: 0,
            crop: {
              x: DRAWABLE_X_MIN,
              y: DRAWABLE_Y_MIN,
              width: DRAWABLE_X_MAX - DRAWABLE_X_MIN,
              height: DRAWABLE_Y_MAX - DRAWABLE_Y_MIN
            }
          });

          // Create a temp layer and add the "screenshot" image. If it's not added to a layer,
          // or added to the stage, then Kinetic won't allow you to call toDataUrl() on it.
          var temp_layer = new Kinetic.Layer();
          temp_layer.add(kineticImage);
          stage.add(temp_layer);
          var dataUrl = kineticImage.toDataURL({
            callback: function(dataUrl) {
              console.log('callback for dataUrl');
            },
          });
          
          // Delete temp layer
          temp_layer.remove();
          addHistoryItem('', 'yellow', dataUrl);
          // TODO: delete kineticImage?
          // backgroundLayer.show();
        }
      });

    }

    // Save - helper, adds items to history store (list is visible in history view)

    function addHistoryItem(name, color, dataUrl) {
      // if No data URL, then it's the "special" case for "new"
      if(!dataUrl) {
        return ;
      } else {
        
        // If there is a dataUrl, then use that image to create thumb, linking to previous visit
        // Keep track of all history Images; allows user to load history via Sencha UI
        var visitHistoryStore = Ext.getStore('visitHistoryStore');
        visitHistoryStore.add({
          title: 'Visit <x>',
          // date: today
          uuid: 'FAKE-UUID-PUSHED',
          // TODO: need to save/retrieve from OpenMRS
          diagnosisCount: 0,
          treatmentCount: 0,
          imgSrc: dataUrl
        });

        g_vistHistoryStore = visitHistoryStore;
      }
    }

    ////////////////////////////////////////////////
    // Initialize
    //  - Draw background
    //  - Add Controls... Pencil, eraser, save
    ////////////////////////////////////////////////
    // Background - blank white canvas
    background = new Kinetic.Rect({
      x: 0,
      y: 0,
      width: stage.getWidth(),
      height: stage.getHeight(),
      fill: "white"
    });
    backgroundLayer.add(background);

    toolbarBackground = new Kinetic.Rect({
      x: 2,
      y: 2,
      // width: stage.getWidth(),
      width: 3 * (CONTROL_ITEM_DIM + CONTROL_ITEM_SPACING) + 2,
      height: DRAWABLE_Y_MIN - 4,
      fill: "#2c7cb9"
    });
    backgroundLayer.add(toolbarBackground);

    // Background - image of OPD-lite: paper, inactive (currently) buttons, etc
    // var imageObj = new Image();
    // imageObj.onload = function() {
    //   console.log("image loaded");
    //   console.log(stage.getWidth(), stage.getHeight());
    //   var backgroundImage = new Kinetic.Image({
    //     x: 0,
    //     y: 0,
    //     image: imageObj,
    //     width: stage.getWidth(),
    //     height: 880
    //   });
    //   // backgroundLayer.add(backgroundImage);
    //   backgroundLayer.draw();
    // }
    // var file = "resources/images/background-768x880.png";
    // imageObj.src = file;

    // Background - image of OPD-lite: paper, inactive (currently) buttons, etc
    var imageObj2 = new Image();
    imageObj2.onload = function() {
      console.log("image loaded");
      console.log(stage.getWidth(), stage.getHeight());
      var backgroundImage = new Kinetic.Image({
        x: 0,
        y: DRAWABLE_Y_MIN,
        image: imageObj2,
        width: 709,
        height: 835
      });
      backgroundLayer.add(backgroundImage);
      backgroundLayer.draw();
    }
    var file = "resources/images/paper_left.jpg";
    imageObj2.src = file;

    // Background - image of OPD-lite: paper, inactive (currently) buttons, etc
    var imageObj3 = new Image();
    imageObj3.onload = function() {
      console.log("image loaded");
      console.log(stage.getWidth(), stage.getHeight());
      var backgroundImage = new Kinetic.Image({
        x: stage.getWidth() - 36,
        y: DRAWABLE_Y_MIN,
        image: imageObj3,
        width: 36,
        height: 835
      });
      backgroundLayer.add(backgroundImage);
      backgroundLayer.draw();
    }
    var file = "resources/images/history_right.jpg";
    imageObj3.src = file;

    var controlItems = [{
      // Pencil (Draw mode)
      image: 'resources/images/icons/pen_on.png',
      x: CONTROL_BASE_X,
      y: CONTROL_BASE_Y,
      width: CONTROL_ITEM_DIM,
      height: CONTROL_ITEM_DIM,
      handler: function() {
        console.log('mode = draw');
        mode = "draw";
      }
    }, {
      // Eraser (Erase mode)
      image: 'resources/images/icons/eraser_off.png',
      x: CONTROL_BASE_X + 1 * (CONTROL_ITEM_DIM + CONTROL_ITEM_SPACING),
      y: CONTROL_BASE_Y,
      width: CONTROL_ITEM_DIM,
      height: CONTROL_ITEM_DIM,
      handler: function() {
        console.log('ERASER: TODO');
        // mode = "erase";
      }
    }, {
      // Keyboard (typed text input)
      image: 'resources/images/icons/text_off.png',
      x: CONTROL_BASE_X + 2 * (CONTROL_ITEM_DIM + CONTROL_ITEM_SPACING),
      y: CONTROL_BASE_Y,
      width: CONTROL_ITEM_DIM,
      height: CONTROL_ITEM_DIM,
      handler: function() {
        console.log('KEYBOARD: TODO');
        // mode = "keyboard";
      }
    }, {
      // Save
      image: 'resources/images/save.png',
      x: stage.getWidth() - 3 * (CONTROL_ITEM_SPACING + CONTROL_ITEM_DIM),
      y: CONTROL_BASE_Y,
      width: CONTROL_ITEM_DIM,
      height: CONTROL_ITEM_DIM,
      handler: function() {
        console.log('tapped save button');
        onSaveCanvas();
      },
    }, {
      // Add diagnosis
      image: 'resources/images/icons/add_D_off.png',
      x: DRAWABLE_X_MIN - CONTROL_ITEM_SPACING - CONTROL_ITEM_DIM,
      y: CONTROL_BASE_Y + 3 * (CONTROL_ITEM_DIM + CONTROL_ITEM_SPACING),
      width: 50,
      height: 49,
      handler: function() {
        console.log("Bringing diagnoses modal window.")
        onClickDiagnosis();
      }
    }, {
      // Add medication
      image: 'resources/images/icons/add_drug_off.png',
      x: DRAWABLE_X_MIN - CONTROL_ITEM_SPACING - CONTROL_ITEM_DIM,
      y: CONTROL_BASE_Y + 4 * (CONTROL_ITEM_DIM + CONTROL_ITEM_SPACING),
      width: 50,
      height: 49,
      handler: function() {
        onClickMedication();
      }
    }, {
      // Add investigation
      image: 'resources/images/icons/add_investigation_off.png',
      x: DRAWABLE_X_MIN - CONTROL_ITEM_SPACING - CONTROL_ITEM_DIM,
      y: CONTROL_BASE_Y + 5 * (CONTROL_ITEM_DIM + CONTROL_ITEM_SPACING),
      width: 50,
      height: 49,
      handler: function() {
        console.log('INVESTIGATIONS: TODO');
      }
    // }, {
    //   // New
    //   // TODO: There should be some option to delete the entire interaction
    //   //  the whole thing is wrong. wrong patient or something??
    //   image: 'resources/images/new.png',
    //   x: CONTROL_BASE_X,
    //   y: CONTROL_BASE_Y + CONTROL_ITEM_DIM*3 + CONTROL_ITEM_SPACING*3,
    //   width: CONTROL_ITEM_DIM,
    //   height: CONTROL_ITEM_DIM,
    //   handler: function() {
    //       // Reset the drawable canvas to be blank
    //       // Also reset highY, so that text will appear in correct place relative to doctor handwriting
    //       // loadedImageLayer.hide();
    //       linesLayer.removeChildren();
    //       textLayer.removeChildren();
    //       highY = DRAWABLE_Y_MIN;
    //       stage.draw();
    //   }
    }];

    // Creates a 'clickable' item with a touch handler.
    // requires parameters for item: x,y,width,height,src,handler
    function createControlItem(item) {
      console.log(item)
      var pencilImageObj = new Image();
      pencilImageObj.onload = function() {
        var box = new Kinetic.Image({
          x: item.x,
          y: item.y,
          width: item.width,
          height: item.height,
          // stroke: "black",
          // strokeWidth: 1,
          image: pencilImageObj
        });
        box.on('click touchstart', item.handler);
        controlsLayer.add(box);
        controlsLayer.draw();
      }
      pencilImageObj.src = item.image;
    }

    for(var i = 0; i < controlItems.length; i++) {
      createControlItem(controlItems[i]);
    }

    //
    // Handlers
    //

    function onClickDiagnosis() {
      console.log("add diagnosis");
      k2s.clickDiagnosis();
      drawDiagnosis(g_diagnosis_list);
    }

    function onClickMedication() {
      // Get user input
      console.log("add diagnosis")
      // var input = window.prompt("What's the diagnosis?","Tuberculosis");
      // Trigger launch of modal dialog in Sencha
      k2s.addMedication();

      // inserts a dianosis wherever there's untouched space on canvas
      // drawTextAtLowPoint(input);
      drawDiagnosis(g_diagnosis_text);
    }

    function drawDiagnosis(text) {
      if(text) {
        drawTextAtLowPoint(text);
      }
    }

    function drawTextAtLowPoint(text) {
      console.log("drawTextAtLowPoint");

      // Set background color of text box according to type of text
      if(text.indexOf('Medications') >= 0) {
        bgFill = '#44f';
      } else if(text.indexOf('Diagnoses') >= 0) {
        bgFill = '#f44';
      } else {
        bgFill = '#eee';
      }

      var complexText = new Kinetic.Text({
        x: 20,
        stroke: '#555',
        strokeWidth: 3,
        fill: bgFill,
        text: '',
        fontSize: 14,
        fontFamily: 'Calibri',
        textFill: '#000',
        padding: 10,
        align: 'left',
        fontStyle: 'italic',
        shadow: {
          color: 'black',
          blur: 1,
          offset: [10, 10],
          opacity: 0.2
        },
        cornerRadius: 10
      });

      complexText.setAttrs({
        y: highY,
        text: text,
        fill: bgFill
      });
      textLayer.add(complexText);
      stage.draw();
      highY += (complexText.textHeight * complexText.textArr.length + 1) + 30;

    }
  };